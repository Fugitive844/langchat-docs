import{_ as i,c as a,o as e,ag as n}from"./chunks/framework.ByciF0Oj.js";const o=JSON.parse('{"title":"RAG API 增强","description":"","frontmatter":{"title":"RAG API 增强"},"headers":[],"relativePath":"course/docs/15RAGAPI2.md","filePath":"course/docs/15RAGAPI2.md","lastUpdated":1738637454000}'),t={name:"course/docs/15RAGAPI2.md"};function h(l,s,k,p,r,E){return e(),a("div",null,s[0]||(s[0]=[n(`<img src="https://minio.pigx.top/oss/202410/1728458493.png" alt="1728458493"><h3 id="检索增强器-retrieval-augmentor" tabindex="-1">检索增强器（Retrieval Augmentor） <a class="header-anchor" href="#检索增强器-retrieval-augmentor" aria-label="Permalink to &quot;检索增强器（Retrieval Augmentor）&quot;">​</a></h3><p><code>RetrievalAugmentor</code> 是 RAG（检索增强生成）流程的核心，它通过从不同的数据源中检索相关内容来增强用户的消息。</p><p>在创建 AI service 时，可以指定 <code>RetrievalAugmentor</code> 实例：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ChatAssistant </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">assistant</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ChatLanguageModel chatLanguageModel, EmbeddingStore</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">TextSegment</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> embeddingStore) {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    DefaultRetrievalAugmentor retrievalAugmentor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DefaultRetrievalAugmentor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">queryTransformer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 查询增强</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">contentRetriever</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 内容源 单个直接配置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">queryRouter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DefaultQueryRouter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 多个内容源，路由</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">contentAggregator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 匹配结果聚合</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">contentInjector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 结果提示词注入</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">executor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 并行化</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AiServices.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ChatAssistant.class)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">chatLanguageModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(chatLanguageModel)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">chatMemory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MessageWindowChatMemory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withMaxMessages</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">retrievalAugmentor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(retrievalAugmentor)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>每次调用 AI 服务时，都会自动使用这个增强器来处理当前的用户消息。你可以使用默认的增强器实现，也可以根据需求自定义。</p><h3 id="默认检索增强器" tabindex="-1">默认检索增强器 <a class="header-anchor" href="#默认检索增强器" aria-label="Permalink to &quot;默认检索增强器&quot;">​</a></h3><p>LangChain4j 提供了开箱即用的 <code>RetrievalAugmentor</code> 实现：<code>DefaultRetrievalAugmentor</code>。它适用于大多数的 RAG 场景。这个实现的灵感来源于 <a href="https://blog.langchain.dev/deconstructing-rag" target="_blank" rel="noreferrer">LangChain 博客文章</a> 和 <a href="https://arxiv.org/abs/2312.10997" target="_blank" rel="noreferrer">相关论文</a>。</p><h3 id="查询-query" tabindex="-1">查询（Query） <a class="header-anchor" href="#查询-query" aria-label="Permalink to &quot;查询（Query）&quot;">​</a></h3><p><code>Query</code> 代表用户的查询请求，包含查询的文本以及相关的元数据。</p><h4 id="查询元数据" tabindex="-1">查询元数据 <a class="header-anchor" href="#查询元数据" aria-label="Permalink to &quot;查询元数据&quot;">​</a></h4><p><code>Query</code> 中的 <code>Metadata</code> 包含在 RAG 流程中有用的上下文信息，例如：</p><ul><li><code>Metadata.userMessage()</code>：表示用户输入的原始消息。</li><li><code>Metadata.chatMemoryId()</code>：一个用于标识用户的ID，可以应用在数据访问限制或过滤上。</li><li><code>Metadata.chatMemory()</code>：之前的所有对话消息，用于理解查询的上下文。</li></ul><h3 id="查询转换器-query-transformer" tabindex="-1">查询转换器（Query Transformer） <a class="header-anchor" href="#查询转换器-query-transformer" aria-label="Permalink to &quot;查询转换器（Query Transformer）&quot;">​</a></h3><p><code>QueryTransformer</code> 用于将原始查询转换为一个或多个新的查询，以提高检索的准确性。常见的查询优化方式包括：</p><ul><li>查询压缩：压缩冗长的对话，生成一个简明的查询。</li><li>查询扩展：将简单的查询扩展为多个相关的查询。</li><li>查询重写：对查询进行改写，使其更适合检索。</li></ul><p><strong>示例：</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">QueryTransformer transformer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CompressingQueryTransformer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><h4 id="默认查询转换器" tabindex="-1">默认查询转换器 <a class="header-anchor" href="#默认查询转换器" aria-label="Permalink to &quot;默认查询转换器&quot;">​</a></h4><p><code>DefaultQueryTransformer</code> 是最简单的实现，它直接传递原始查询而不进行任何修改。</p><h4 id="压缩查询转换器" tabindex="-1">压缩查询转换器 <a class="header-anchor" href="#压缩查询转换器" aria-label="Permalink to &quot;压缩查询转换器&quot;">​</a></h4><p><code>CompressingQueryTransformer</code> 使用大语言模型（LLM）压缩查询和对话上下文，生成一个更简洁、独立的查询。例如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>用户：告诉我关于John Doe的信息。</span></span>
<span class="line"><span>AI：John Doe 是一个著名作家。</span></span>
<span class="line"><span>用户：他住在哪里？</span></span></code></pre></div><p>对于“他住在哪里？”这样的查询，<code>CompressingQueryTransformer</code> 会自动转换为“John Doe 住在哪里？”，以便更精准地检索信息。</p><h4 id="扩展查询转换器" tabindex="-1">扩展查询转换器 <a class="header-anchor" href="#扩展查询转换器" aria-label="Permalink to &quot;扩展查询转换器&quot;">​</a></h4><p><code>ExpandingQueryTransformer</code> 可以将简单的查询扩展为多个不同的表达方式，从而提高相关内容的覆盖面。</p><h3 id="内容-content" tabindex="-1">内容（Content） <a class="header-anchor" href="#内容-content" aria-label="Permalink to &quot;内容（Content）&quot;">​</a></h3><p><code>Content</code> 代表系统从数据源中检索到的与查询相关的内容。目前支持的主要是文本内容（<code>TextSegment</code>），未来可能会扩展支持其他模态，如图像、音频、视频等。</p><h3 id="内容检索器-content-retriever" tabindex="-1">内容检索器（Content Retriever） <a class="header-anchor" href="#内容检索器-content-retriever" aria-label="Permalink to &quot;内容检索器（Content Retriever）&quot;">​</a></h3><p><code>ContentRetriever</code> 根据用户的查询从底层数据源中获取内容，数据源可以是：</p><ul><li>嵌入向量存储</li><li>全文搜索引擎</li><li>向量与全文检索结合</li><li>网络搜索引擎</li><li>SQL数据库</li><li>知识图谱等</li></ul><h4 id="嵌入存储内容检索器" tabindex="-1">嵌入存储内容检索器 <a class="header-anchor" href="#嵌入存储内容检索器" aria-label="Permalink to &quot;嵌入存储内容检索器&quot;">​</a></h4><p><code>EmbeddingStoreContentRetriever</code> 使用嵌入模型将查询转化为向量，并从嵌入存储中检索相关的内容。</p><p><strong>示例代码：</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">EmbeddingStore embeddingStore </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">EmbeddingModel embeddingModel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ContentRetriever contentRetriever </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> EmbeddingStoreContentRetriever.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">embeddingStore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(embeddingStore)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">embeddingModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(embeddingModel)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">maxResults</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 返回最多3条结果</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dynamicMaxResults</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(query </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 根据查询动态指定maxResults</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">minScore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.75</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 过滤分数低于0.75的内容</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dynamicMinScore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(query </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.75</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 根据查询动态指定minScore</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">metadataKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;userId&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isEqualTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;12345&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 过滤指定用户的内容</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dynamicFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(query </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        String userId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getUserId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(query.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">metadata</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">chatMemoryId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> metadataKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;userId&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isEqualTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(userId);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 动态过滤</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><h4 id="网络搜索内容检索器" tabindex="-1">网络搜索内容检索器 <a class="header-anchor" href="#网络搜索内容检索器" aria-label="Permalink to &quot;网络搜索内容检索器&quot;">​</a></h4><p><code>WebSearchContentRetriever</code> 通过 <code>WebSearchEngine</code> 从互联网上检索相关内容。</p><p><strong>示例代码：</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">WebSearchEngine googleSearchEngine </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GoogleCustomWebSearchEngine.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apiKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(System.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getenv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;GOOGLE_API_KEY&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">csi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(System.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getenv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;GOOGLE_SEARCH_ENGINE_ID&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ContentRetriever contentRetriever </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> WebSearchContentRetriever.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">webSearchEngine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(googleSearchEngine)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">maxResults</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p>查看完整示例请参考<a href="https://github.com/langchain4j/langchain4j-examples/blob/main/rag-examples/src/main/java/_3_advanced/_08_Advanced_RAG_Web_Search_Example.java" target="_blank" rel="noreferrer">这里</a>。</p><h4 id="sql数据库内容检索器" tabindex="-1">SQL数据库内容检索器 <a class="header-anchor" href="#sql数据库内容检索器" aria-label="Permalink to &quot;SQL数据库内容检索器&quot;">​</a></h4><p><code>SqlDatabaseContentRetriever</code> 是用于从SQL数据库检索数据的实验性实现。更多信息可参考相关javadoc文档。</p><h4 id="azure-ai-搜索内容检索器" tabindex="-1">Azure AI 搜索内容检索器 <a class="header-anchor" href="#azure-ai-搜索内容检索器" aria-label="Permalink to &quot;Azure AI 搜索内容检索器&quot;">​</a></h4><p><code>AzureAiSearchContentRetriever</code> 在 <code>langchain4j-azure-ai-search</code> 模块中可用。</p><h4 id="neo4j内容检索器" tabindex="-1">Neo4j内容检索器 <a class="header-anchor" href="#neo4j内容检索器" aria-label="Permalink to &quot;Neo4j内容检索器&quot;">​</a></h4><p><code>Neo4jContentRetriever</code> 可用于从Neo4j数据库中检索与查询相关的内容。</p><h3 id="查询路由器-query-router" tabindex="-1">查询路由器（Query Router） <a class="header-anchor" href="#查询路由器-query-router" aria-label="Permalink to &quot;查询路由器（Query Router）&quot;">​</a></h3><p><code>QueryRouter</code> 负责将查询分配到合适的内容检索器。</p><h4 id="默认查询路由器" tabindex="-1">默认查询路由器 <a class="header-anchor" href="#默认查询路由器" aria-label="Permalink to &quot;默认查询路由器&quot;">​</a></h4><p><code>DefaultQueryRouter</code> 将每个查询路由到所有配置的内容检索器。</p><h4 id="语言模型查询路由器" tabindex="-1">语言模型查询路由器 <a class="header-anchor" href="#语言模型查询路由器" aria-label="Permalink to &quot;语言模型查询路由器&quot;">​</a></h4><p><code>LanguageModelQueryRouter</code> 使用大语言模型（LLM）决定应该将查询发送到哪个检索器。</p><h3 id="并行化处理" tabindex="-1">并行化处理 <a class="header-anchor" href="#并行化处理" aria-label="Permalink to &quot;并行化处理&quot;">​</a></h3><p>当只有一个查询和一个检索器时，<code>DefaultRetrievalAugmentor</code> 会在单线程中执行查询和检索。否则，它会使用 <code>Executor</code> 并行处理多个查询和检索任务。默认情况下，系统会使用一个修改后的 <code>Executors.newCachedThreadPool()</code> 来实现这一功能，你也可以提供自定义的 <code>Executor</code>：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DefaultRetrievalAugmentor augmentor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DefaultRetrievalAugmentor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">executor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(executor)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div>`,55)]))}const g=i(t,[["render",h]]);export{o as __pageData,g as default};
